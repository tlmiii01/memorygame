{"version":3,"sources":["components/Navbar.js","components/Jumbotron.js","components/ClickableCard.js","App.js","index.js"],"names":["style","text","font-size","Navbar","props","react_default","a","createElement","className","message","score","highScore","logo","height","width","dragonball","background","Jumbotron","src","cardStyle","ClickableCard","onClick","reArrangeCards","clickedCharacters","id","processClick","image","alt","name","App","state","cards","_this","includes","setState","concat","Object","toConsumableArray","length","array","currentIndex","randomIndex","Math","floor","random","temporaryValue","renderCards","map","card","key","components_ClickableCard","components_Navbar","this","components_Jumbotron","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.2557a041.chunk.js","sourcesContent":["import React from \"react\";\n\nconst style = {\n  text: {\n    \"font-size\": \"1.5rem\"\n  }\n}\n\nvar Navbar = (props) => (\n    <nav style={style.text} className=\"navbar navbar-dark bg-dark sticky-top text-white\">\n      <ul>Memory Gane</ul>\n      <ul>{props.message}</ul>  \n      <ul>Score: {props.score} | High Score: {props.highScore}</ul>\n    </nav>\n);\n\nexport default Navbar;","import React from \"react\";\n\nconst style = {\n  logo: {\n    height: \"8rem\",\n    width: \"25rem\"\n  },\n  dragonball: {\n    background: \"#F99102\"\n  }\n}\n\nconst Jumbotron = () => (\n  <div style={style.dragonball} className=\"jumbotron\">\n    <div className=\"text-center\">\n      <img style={style.logo} src=\"https://vignette.wikia.nocookie.net/dragonball-zeron/images/9/95/HQ_DragonBall_Z_logo.png/revision/latest?cb=20130130143427\" />\n      <h1 className=\"mt-3\">Memory Game</h1>\n    </div>\n  </div>\n);\n\nexport default Jumbotron;","import React from \"react\";\n\nconst style = {\n  cardStyle: {\n    height: \"250px\",\n    width: \"250px\"\n  }\n}\n\nfunction processClick(props) {\n  props.reArrangeCards();\n  // console.log(props.id);\n  props.clickedCharacters(props.id);\n  // console.log(\"Clicked card...\")\n};\n\nvar ClickableCard = (props) => (\n  <div className=\"card img-container mb-3\" onClick={() => processClick(props)}>\n    <img className=\"mx-auto\" style={style.cardStyle} src={props.image} alt={props.name} />\n  </div>\n\n);\n\nexport default ClickableCard;","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar.js\";\nimport Jumbotron from \"./components/Jumbotron.js\";\n// import Gameboard from \"./components/Gameboard.js\";\nimport ClickableCard from \"./components/ClickableCard.js\";\nimport cards from \"./cards.json\";\n// import { throwError } from 'rxjs';\n\nclass App extends React.Component {\n  state = {\n    cards: cards,\n    score: 0,\n    highScore: 0,\n    message: \"Click a character!!\",\n    clickedCharacters: []\n  };\n\n  clickedCharacters = (id) => {\n    // console.log(id);\n    if (this.state.clickedCharacters.includes(id)) {\n      // console.log(`You have clicked this already!`);\n      this.setState({ message: \"Game Over!\" });\n      this.setState({\n        clickedCharacters: [],\n        score: 0\n      });\n    } else {\n      this.setState({ clickedCharacters: [...this.state.clickedCharacters, id] });\n      this.setState({ score: this.state.score + 1 });\n      // Check against the high score and update as necessary\n      if (this.state.score >= this.state.highScore) {\n        this.setState({ highScore: this.state.highScore + 1 });\n      }\n      \n      // End game if the score is equal to the number of cards\n      // At this point, score is one less, so I am going\n      // to adjust accordingly\n      if (this.state.score + 1 === cards.length) {\n        this.setState({message:`You Win!!`});\n        this.setState({\n          score: 0,\n          clickedCharacters: []\n        });\n      } else {\n        this.setState({ message: \"Good Guess!!\" })\n      }\n\n    }\n  }\n\n  // Found this algorithm online...\n  reArrangeCards = (array) => {\n    let currentIndex = array.length;\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      let temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    this.setState({ cards: cards });\n  }\n\n  renderCards = (array) => {\n    return this.state.cards.map(card => (\n      <section className=\"col s3\" key={card.id} id={card.id}>\n        <ClickableCard\n          name={card.name}\n          image={card.image}\n          reArrangeCards={() => { this.reArrangeCards(this.state.cards) }}\n          clickedCharacters={() => { this.clickedCharacters(card.id) }}\n        />\n      </section>\n    ))\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          score={this.state.score}\n          highScore={this.state.highScore}\n          message={this.state.message}\n        />\n        <Jumbotron />\n        <div className=\"container\">\n          <div className=\"row\">\n            {this.renderCards(this.state.cards)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}